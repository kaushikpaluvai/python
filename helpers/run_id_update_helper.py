import requests, json
import os

''' 
After the training job, new cosmos collections have been created that have the run id as a suffix.
This function updates the run id stored in configuration on the indicated function app so that
the function app points to/uses the new collections.
'''
def update_run_id(fnAppName, rgName, sub_id, job_id, run_id, logger):
    taggedInfo = { "DatabricksJobId": job_id, "FunctionAppName" : fnAppName, "New_Run_ID" : run_id}
    try:
        tenant_id = os.environ["AZURE_SVCP_TENANT_ID"]
        client_id = os.environ["AZURE_SVCP_ID"]
        resource = "https%3A//management.core.windows.net"
        client_secret = os.environ["AZURE_SVCP_SECRET"]
        tokenUrl = f"https://login.microsoftonline.com/{tenant_id}/oauth2/token"
        headers = {
        "Content-Type" : "application/x-www-form-urlencoded"
        }        
        # first get the access token for the ARM REST API
        # using the client credentials OAUTH2 flow
        payload = f'grant_type=client_credentials&client_id={client_id}&resource={resource}&client_secret={client_secret}'
        response = requests.post(tokenUrl, headers=headers, data = payload)
        token = response.json()["access_token"]

        # now we need to first get the whole list of settings and then update the item we want and apply the whole list again. This will be a POST request
        curr_appsettings_url = f"https://management.azure.com/subscriptions/{sub_id}/resourceGroups/{rgName}/providers/Microsoft.Web/sites/{fnAppName}/config/appsettings/list?api-version=2019-08-01"
        headers["Authorization"] = f"Bearer {token}"
        response = requests.post(curr_appsettings_url, headers=headers)
        appSettings = response.json()["properties"]

        # retrieve the old id
        old_run_id = appSettings["RUN_ID"]
        # set the new id generated by the code
        appSettings["RUN_ID"] = run_id #no_mlflow

        # now update using the PUT request
        update_appsettings_url = f"https://management.azure.com/subscriptions/{sub_id}/resourceGroups/{rgName}/providers/Microsoft.Web/sites/{fnAppName}/config/appsettings?api-version=2019-08-01"
        headers["Content-Type"] = "application/json"
        payload = {
            "properties" : appSettings
        }
        response = requests.put(update_appsettings_url, headers=headers, data=json.dumps(payload))
        taggedInfo["Old_Run_ID"] = old_run_id
        taggedInfo["Function_App_Update_Status"]="Success"
        logger.info(f"Function App {fnAppName} has been updated by Job {job_id} from Old value {old_run_id} : New Value {run_id}", extra={"metrics": taggedInfo })
    except Exception as ex:
        taggedInfo["Function_App_Update_Status"]="Failed"
        reason = f"Error calling ARM REST Apis {ex.args}"
        logger.info(f"Failed to update Function App {fnAppName} by Job {job_id} to New Value {run_id} due to {reason}", extra={"metrics": taggedInfo })
